#!/usr/bin/python3

"""This module contains the base module class

All classes are derived from this.
"""

import json


class Base:
    """The base class."""

    __nb_objects = 0
    """number of objects"""

    def __init__(self, id=None):
        """Construct a new Base object."""
        if id is not None:
            self.id = id
        else:
            Base.__nb_objects += 1
            self.id = Base.__nb_objects

    @staticmethod
    def to_json_string(list_dictionaries):
        """returns the JSON string representation of a list of dictionaries"""
        if list_dictionaries is None:
            return "[]"
        return json.dumps(list_dictionaries)

    @classmethod
    def save_to_file(cls, list_objs):
        """This Class method creates a JSON string and saves it to a file."""
        if list_objs is None or len(list_objs) == 0:
            json_str = "[]"
        else:
            ls_dicts = [obj.to_dictionary() for obj in list_objs]
            json_str = cls.to_json_string(ls_dicts)
        with open(cls.__name__ + ".json", "w") as f:
            f.write(json_str)

    @staticmethod
    def from_json_string(json_string):
        """ returns the list of the JSON string representation json_string """
        if json_string is None or json_string == "[]":
            return []
        return json.loads(json_string)

    @classmethod
    def create(cls, **dictionary):
        """  returns an instance with all attributes already set """

        if dictionary is None or dictionary == {}:
            return None

        if cls.__name__ == "Rectangle":
            dummy = cls(1, 1)
        elif cls.__name__ == "Square":
            dummy = cls(1)
        else:
            return None

        dummy.update(**dictionary)
        return dummy

    @classmethod
    def load_from_file(cls):
        """Return a list of instances based on JSON data in a file"""

        filename = cls.__name__ + ".json"

        try:
            with open(filename, "r") as f:
                json_str = f.read()
                json_dict_l = cls.from_json_string(json_str)
            return [cls.create(**json_dict) for json_dict in json_dict_l]
        except FileNotFoundError:
            return []

    @classmethod
    def save_to_file_csv(cls, list_objs):
        """serialize a list of objects"""
        csv_str = ""
        if list_objs is not None and len(list_objs) != 0:
            if cls.__name__ == 'Rectangle':
                #csv_lst = ["obj.__class__" for obj in list_objs]
                csv_lst = [f"{obj.id}, {obj.width}, {obj.height}, {obj.x}, {obj.y}" for obj in list_objs]
            elif cls.__name__ == 'Square':
                csv_lst = [f"{obj.id}, {obj.size}, {obj.x}, {obj.y}" for obj in list_objs]
            csv_str = ', '.join(csv_lst)
        with open(cls.__name__ + ".csv", "w") as f:
            f.write(csv_str)
        return
